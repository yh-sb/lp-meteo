name: build

on: [push, pull_request]

env:
  gcc_arm_version: 10.3-2021.10

jobs:
  build-windows:
    runs-on: windows-latest
    steps:
      - name: Install dependencies
        run: |
          # Installing GCC ARM none eabi
          curl -L https://developer.arm.com/-/media/Files/downloads/gnu-rm/${{env.gcc_arm_version}}/gcc-arm-none-eabi-${{env.gcc_arm_version}}-win32.zip -o gcc-arm-none-eabi-${{env.gcc_arm_version}}-win32.zip
          tar -xf gcc-arm-none-eabi-${{env.gcc_arm_version}}-win32.zip -C C:\
          Add-Content $env:GITHUB_PATH "C:\gcc-arm-none-eabi-${{env.gcc_arm_version}}\bin"
          # Installing Ninja
          curl -L https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-win.zip -o ninja-win.zip
          mkdir C:\ninja
          tar -xf ninja-win.zip -C C:\ninja
          Add-Content $env:GITHUB_PATH "C:\ninja"

      - name: Checkout with submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Build
        run: |
          cmake . -Bbuild -G Ninja -DCMAKE_BUILD_TYPE=Debug
          cmake --build build -j

      - name: Set artifacts suffix (if tag)
        if: startsWith(github.ref, 'refs/tags/') == true
        run: Add-Content $env:GITHUB_ENV "git_suffix=$(git describe --tags --abbrev=0)"

      - name: Set artifacts suffix (if branch)
        if: startsWith(github.ref, 'refs/tags/') != true
        run: Add-Content $env:GITHUB_ENV "git_suffix=$(Write-Output "$(git rev-parse --abbrev-ref HEAD)-$(git rev-parse --short HEAD)")"

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: lp-meteo-${{env.git_suffix}}
          path: |
            build/lp-meteo.bin
            build/lp-meteo.elf
            build/lp-meteo.map
          if-no-files-found: error

  build-linux:
    runs-on: ubuntu-latest
    steps:
      - name: Install dependencies
        run: |
          wget -q https://developer.arm.com/-/media/Files/downloads/gnu-rm/$gcc_arm_version/gcc-arm-none-eabi-$gcc_arm_version-x86_64-linux.tar.bz2
          sudo tar -xjf gcc-arm-none-eabi-$gcc_arm_version-x86_64-linux.tar.bz2 -C /usr/share/
          echo "/usr/share/gcc-arm-none-eabi-$gcc_arm_version/bin" >> $GITHUB_PATH
          sudo apt update && sudo apt install ninja-build

      - name: Checkout with submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Build
        run: |
          cmake . -Bbuild -G Ninja -DCMAKE_BUILD_TYPE=Debug
          cmake --build build -j
